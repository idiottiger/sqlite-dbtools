// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/tablecolumns.proto

#ifndef PROTOBUF_proto_2ftablecolumns_2eproto__INCLUDED
#define PROTOBUF_proto_2ftablecolumns_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dbtools_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2ftablecolumns_2eproto();
void protobuf_AssignDesc_proto_2ftablecolumns_2eproto();
void protobuf_ShutdownFile_proto_2ftablecolumns_2eproto();

class TableColumn;
class TableColumnList;

enum TableColumn_ColumnType {
  TableColumn_ColumnType_INTEGER = 0,
  TableColumn_ColumnType_TEXT = 1,
  TableColumn_ColumnType_BLOB = 2,
  TableColumn_ColumnType_REAL = 3
};
bool TableColumn_ColumnType_IsValid(int value);
const TableColumn_ColumnType TableColumn_ColumnType_ColumnType_MIN = TableColumn_ColumnType_INTEGER;
const TableColumn_ColumnType TableColumn_ColumnType_ColumnType_MAX = TableColumn_ColumnType_REAL;
const int TableColumn_ColumnType_ColumnType_ARRAYSIZE = TableColumn_ColumnType_ColumnType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TableColumn_ColumnType_descriptor();
inline const ::std::string& TableColumn_ColumnType_Name(TableColumn_ColumnType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TableColumn_ColumnType_descriptor(), value);
}
inline bool TableColumn_ColumnType_Parse(
    const ::std::string& name, TableColumn_ColumnType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TableColumn_ColumnType>(
    TableColumn_ColumnType_descriptor(), name, value);
}
// ===================================================================

class TableColumn : public ::google::protobuf::Message {
 public:
  TableColumn();
  virtual ~TableColumn();

  TableColumn(const TableColumn& from);

  inline TableColumn& operator=(const TableColumn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableColumn& default_instance();

  void Swap(TableColumn* other);

  // implements Message ----------------------------------------------

  TableColumn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableColumn& from);
  void MergeFrom(const TableColumn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TableColumn_ColumnType ColumnType;
  static const ColumnType INTEGER = TableColumn_ColumnType_INTEGER;
  static const ColumnType TEXT = TableColumn_ColumnType_TEXT;
  static const ColumnType BLOB = TableColumn_ColumnType_BLOB;
  static const ColumnType REAL = TableColumn_ColumnType_REAL;
  static inline bool ColumnType_IsValid(int value) {
    return TableColumn_ColumnType_IsValid(value);
  }
  static const ColumnType ColumnType_MIN =
    TableColumn_ColumnType_ColumnType_MIN;
  static const ColumnType ColumnType_MAX =
    TableColumn_ColumnType_ColumnType_MAX;
  static const int ColumnType_ARRAYSIZE =
    TableColumn_ColumnType_ColumnType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ColumnType_descriptor() {
    return TableColumn_ColumnType_descriptor();
  }
  static inline const ::std::string& ColumnType_Name(ColumnType value) {
    return TableColumn_ColumnType_Name(value);
  }
  static inline bool ColumnType_Parse(const ::std::string& name,
      ColumnType* value) {
    return TableColumn_ColumnType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .dbtools_proto.TableColumn.ColumnType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::dbtools_proto::TableColumn_ColumnType type() const;
  inline void set_type(::dbtools_proto::TableColumn_ColumnType value);

  // @@protoc_insertion_point(class_scope:dbtools_proto.TableColumn)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 index_;
  int type_;
  friend void  protobuf_AddDesc_proto_2ftablecolumns_2eproto();
  friend void protobuf_AssignDesc_proto_2ftablecolumns_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftablecolumns_2eproto();

  void InitAsDefaultInstance();
  static TableColumn* default_instance_;
};
// -------------------------------------------------------------------

class TableColumnList : public ::google::protobuf::Message {
 public:
  TableColumnList();
  virtual ~TableColumnList();

  TableColumnList(const TableColumnList& from);

  inline TableColumnList& operator=(const TableColumnList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableColumnList& default_instance();

  void Swap(TableColumnList* other);

  // implements Message ----------------------------------------------

  TableColumnList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableColumnList& from);
  void MergeFrom(const TableColumnList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dbtools_proto.TableColumn column = 1;
  inline int column_size() const;
  inline void clear_column();
  static const int kColumnFieldNumber = 1;
  inline const ::dbtools_proto::TableColumn& column(int index) const;
  inline ::dbtools_proto::TableColumn* mutable_column(int index);
  inline ::dbtools_proto::TableColumn* add_column();
  inline const ::google::protobuf::RepeatedPtrField< ::dbtools_proto::TableColumn >&
      column() const;
  inline ::google::protobuf::RepeatedPtrField< ::dbtools_proto::TableColumn >*
      mutable_column();

  // @@protoc_insertion_point(class_scope:dbtools_proto.TableColumnList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dbtools_proto::TableColumn > column_;
  friend void  protobuf_AddDesc_proto_2ftablecolumns_2eproto();
  friend void protobuf_AssignDesc_proto_2ftablecolumns_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftablecolumns_2eproto();

  void InitAsDefaultInstance();
  static TableColumnList* default_instance_;
};
// ===================================================================


// ===================================================================

// TableColumn

// required int32 index = 1;
inline bool TableColumn::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableColumn::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableColumn::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableColumn::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 TableColumn::index() const {
  // @@protoc_insertion_point(field_get:dbtools_proto.TableColumn.index)
  return index_;
}
inline void TableColumn::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:dbtools_proto.TableColumn.index)
}

// required string name = 2;
inline bool TableColumn::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableColumn::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableColumn::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableColumn::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TableColumn::name() const {
  // @@protoc_insertion_point(field_get:dbtools_proto.TableColumn.name)
  return *name_;
}
inline void TableColumn::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:dbtools_proto.TableColumn.name)
}
inline void TableColumn::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:dbtools_proto.TableColumn.name)
}
inline void TableColumn::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dbtools_proto.TableColumn.name)
}
inline ::std::string* TableColumn::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dbtools_proto.TableColumn.name)
  return name_;
}
inline ::std::string* TableColumn::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TableColumn::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dbtools_proto.TableColumn.name)
}

// required .dbtools_proto.TableColumn.ColumnType type = 3;
inline bool TableColumn::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TableColumn::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TableColumn::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TableColumn::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::dbtools_proto::TableColumn_ColumnType TableColumn::type() const {
  // @@protoc_insertion_point(field_get:dbtools_proto.TableColumn.type)
  return static_cast< ::dbtools_proto::TableColumn_ColumnType >(type_);
}
inline void TableColumn::set_type(::dbtools_proto::TableColumn_ColumnType value) {
  assert(::dbtools_proto::TableColumn_ColumnType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:dbtools_proto.TableColumn.type)
}

// -------------------------------------------------------------------

// TableColumnList

// repeated .dbtools_proto.TableColumn column = 1;
inline int TableColumnList::column_size() const {
  return column_.size();
}
inline void TableColumnList::clear_column() {
  column_.Clear();
}
inline const ::dbtools_proto::TableColumn& TableColumnList::column(int index) const {
  // @@protoc_insertion_point(field_get:dbtools_proto.TableColumnList.column)
  return column_.Get(index);
}
inline ::dbtools_proto::TableColumn* TableColumnList::mutable_column(int index) {
  // @@protoc_insertion_point(field_mutable:dbtools_proto.TableColumnList.column)
  return column_.Mutable(index);
}
inline ::dbtools_proto::TableColumn* TableColumnList::add_column() {
  // @@protoc_insertion_point(field_add:dbtools_proto.TableColumnList.column)
  return column_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dbtools_proto::TableColumn >&
TableColumnList::column() const {
  // @@protoc_insertion_point(field_list:dbtools_proto.TableColumnList.column)
  return column_;
}
inline ::google::protobuf::RepeatedPtrField< ::dbtools_proto::TableColumn >*
TableColumnList::mutable_column() {
  // @@protoc_insertion_point(field_mutable_list:dbtools_proto.TableColumnList.column)
  return &column_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbtools_proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dbtools_proto::TableColumn_ColumnType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dbtools_proto::TableColumn_ColumnType>() {
  return ::dbtools_proto::TableColumn_ColumnType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2ftablecolumns_2eproto__INCLUDED
