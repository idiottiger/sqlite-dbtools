// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/tablecolumns.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/tablecolumns.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dbtools_proto {

namespace {

const ::google::protobuf::Descriptor* TableColumn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableColumn_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TableColumn_ColumnType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TableColumnList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableColumnList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2ftablecolumns_2eproto() {
  protobuf_AddDesc_proto_2ftablecolumns_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/tablecolumns.proto");
  GOOGLE_CHECK(file != NULL);
  TableColumn_descriptor_ = file->message_type(0);
  static const int TableColumn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableColumn, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableColumn, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableColumn, type_),
  };
  TableColumn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableColumn_descriptor_,
      TableColumn::default_instance_,
      TableColumn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableColumn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableColumn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableColumn));
  TableColumn_ColumnType_descriptor_ = TableColumn_descriptor_->enum_type(0);
  TableColumnList_descriptor_ = file->message_type(1);
  static const int TableColumnList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableColumnList, column_),
  };
  TableColumnList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableColumnList_descriptor_,
      TableColumnList::default_instance_,
      TableColumnList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableColumnList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableColumnList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableColumnList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2ftablecolumns_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableColumn_descriptor_, &TableColumn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableColumnList_descriptor_, &TableColumnList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2ftablecolumns_2eproto() {
  delete TableColumn::default_instance_;
  delete TableColumn_reflection_;
  delete TableColumnList::default_instance_;
  delete TableColumnList_reflection_;
}

void protobuf_AddDesc_proto_2ftablecolumns_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030proto/tablecolumns.proto\022\rdbtools_prot"
    "o\"\230\001\n\013TableColumn\022\r\n\005index\030\001 \002(\005\022\014\n\004name"
    "\030\002 \002(\t\0223\n\004type\030\003 \002(\0162%.dbtools_proto.Tab"
    "leColumn.ColumnType\"7\n\nColumnType\022\013\n\007INT"
    "EGER\020\000\022\010\n\004TEXT\020\001\022\010\n\004BLOB\020\002\022\010\n\004REAL\020\003\"=\n\017"
    "TableColumnList\022*\n\006column\030\001 \003(\0132\032.dbtool"
    "s_proto.TableColumn", 259);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/tablecolumns.proto", &protobuf_RegisterTypes);
  TableColumn::default_instance_ = new TableColumn();
  TableColumnList::default_instance_ = new TableColumnList();
  TableColumn::default_instance_->InitAsDefaultInstance();
  TableColumnList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2ftablecolumns_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2ftablecolumns_2eproto {
  StaticDescriptorInitializer_proto_2ftablecolumns_2eproto() {
    protobuf_AddDesc_proto_2ftablecolumns_2eproto();
  }
} static_descriptor_initializer_proto_2ftablecolumns_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* TableColumn_ColumnType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableColumn_ColumnType_descriptor_;
}
bool TableColumn_ColumnType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TableColumn_ColumnType TableColumn::INTEGER;
const TableColumn_ColumnType TableColumn::TEXT;
const TableColumn_ColumnType TableColumn::BLOB;
const TableColumn_ColumnType TableColumn::REAL;
const TableColumn_ColumnType TableColumn::ColumnType_MIN;
const TableColumn_ColumnType TableColumn::ColumnType_MAX;
const int TableColumn::ColumnType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TableColumn::kIndexFieldNumber;
const int TableColumn::kNameFieldNumber;
const int TableColumn::kTypeFieldNumber;
#endif  // !_MSC_VER

TableColumn::TableColumn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbtools_proto.TableColumn)
}

void TableColumn::InitAsDefaultInstance() {
}

TableColumn::TableColumn(const TableColumn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dbtools_proto.TableColumn)
}

void TableColumn::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableColumn::~TableColumn() {
  // @@protoc_insertion_point(destructor:dbtools_proto.TableColumn)
  SharedDtor();
}

void TableColumn::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TableColumn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableColumn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableColumn_descriptor_;
}

const TableColumn& TableColumn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2ftablecolumns_2eproto();
  return *default_instance_;
}

TableColumn* TableColumn::default_instance_ = NULL;

TableColumn* TableColumn::New() const {
  return new TableColumn;
}

void TableColumn::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TableColumn*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(index_, type_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableColumn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbtools_proto.TableColumn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .dbtools_proto.TableColumn.ColumnType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dbtools_proto::TableColumn_ColumnType_IsValid(value)) {
            set_type(static_cast< ::dbtools_proto::TableColumn_ColumnType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbtools_proto.TableColumn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbtools_proto.TableColumn)
  return false;
#undef DO_
}

void TableColumn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbtools_proto.TableColumn)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required .dbtools_proto.TableColumn.ColumnType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dbtools_proto.TableColumn)
}

::google::protobuf::uint8* TableColumn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbtools_proto.TableColumn)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .dbtools_proto.TableColumn.ColumnType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbtools_proto.TableColumn)
  return target;
}

int TableColumn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .dbtools_proto.TableColumn.ColumnType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableColumn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableColumn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableColumn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableColumn::MergeFrom(const TableColumn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableColumn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableColumn::CopyFrom(const TableColumn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableColumn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TableColumn::Swap(TableColumn* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableColumn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableColumn_descriptor_;
  metadata.reflection = TableColumn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableColumnList::kColumnFieldNumber;
#endif  // !_MSC_VER

TableColumnList::TableColumnList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbtools_proto.TableColumnList)
}

void TableColumnList::InitAsDefaultInstance() {
}

TableColumnList::TableColumnList(const TableColumnList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dbtools_proto.TableColumnList)
}

void TableColumnList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableColumnList::~TableColumnList() {
  // @@protoc_insertion_point(destructor:dbtools_proto.TableColumnList)
  SharedDtor();
}

void TableColumnList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableColumnList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableColumnList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableColumnList_descriptor_;
}

const TableColumnList& TableColumnList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2ftablecolumns_2eproto();
  return *default_instance_;
}

TableColumnList* TableColumnList::default_instance_ = NULL;

TableColumnList* TableColumnList::New() const {
  return new TableColumnList;
}

void TableColumnList::Clear() {
  column_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableColumnList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbtools_proto.TableColumnList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dbtools_proto.TableColumn column = 1;
      case 1: {
        if (tag == 10) {
         parse_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_column()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_column;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbtools_proto.TableColumnList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbtools_proto.TableColumnList)
  return false;
#undef DO_
}

void TableColumnList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbtools_proto.TableColumnList)
  // repeated .dbtools_proto.TableColumn column = 1;
  for (int i = 0; i < this->column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->column(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dbtools_proto.TableColumnList)
}

::google::protobuf::uint8* TableColumnList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbtools_proto.TableColumnList)
  // repeated .dbtools_proto.TableColumn column = 1;
  for (int i = 0; i < this->column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->column(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbtools_proto.TableColumnList)
  return target;
}

int TableColumnList::ByteSize() const {
  int total_size = 0;

  // repeated .dbtools_proto.TableColumn column = 1;
  total_size += 1 * this->column_size();
  for (int i = 0; i < this->column_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->column(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableColumnList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableColumnList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableColumnList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableColumnList::MergeFrom(const TableColumnList& from) {
  GOOGLE_CHECK_NE(&from, this);
  column_.MergeFrom(from.column_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableColumnList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableColumnList::CopyFrom(const TableColumnList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableColumnList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->column())) return false;
  return true;
}

void TableColumnList::Swap(TableColumnList* other) {
  if (other != this) {
    column_.Swap(&other->column_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableColumnList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableColumnList_descriptor_;
  metadata.reflection = TableColumnList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbtools_proto

// @@protoc_insertion_point(global_scope)
